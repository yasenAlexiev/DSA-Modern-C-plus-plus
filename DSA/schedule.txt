1. Представяне на това каква е идеята на курса,
    връзката с други курсове, ревю на темите.
    Преговор на материала от УП и ООП.
    Материали за четене
    Обяснение на видове памети(регистри, кеш, RAM, хард)
    Устройство на процесора и колко операции извършва за една секунда

2. Няколко основни алгоритъма
    - просто число
    - простите числа по-малки от N (решето на Ератостен)
    - прости числа в интервала [a,b]
    - комбинаторика : генериране на пермутации/вариации
    -- пресмятане на  
        (n)
        ( ) = ? 	
        (k)		
        чрез триъгълник на Паскал
    - разбиване на естествено число на всички възможни суми

3. Увод в структорите от данни
    - сложност на операциите
    - нотацията big O
    - реализация на динамичен масив (vector)
    - итератор - идея + реализация за динамичния масив
    - търсене и сортиране в динамичен масив
    - сложност на операциите 

4. Свързан списък
    - едносвързан/двусвързан/цикличен
    - реализация + итератор
    - сравнение с динамичния масив
    - какво е Locality?
    - Да засечем за колко време се обхожда свързания списък и динамичния масив?

5. Стек и Опашка
    - представяне като адаптори чрез вектор и свързан списък
    - приложения
    - още видове реализация
    - темплейтна реализация с алокатор
    - тестване на бързината с различни видове алокатори - наши и такива в std

6. Дървета (част 1)
    - обща концепция, рекурсивни дефиниции, приложения

    - двоично дърво за претърсване + имплементация:
        включване, изключване, търсене, обхождане,
        намиране на дълбочина, намиране броя на листата 
	
    - дървета с прозволен брой разклонения

7. Дървета(част 2)
    - префиксни дървета

    - *балансирани/идеално балансирани дървета:
    -- дефиниции, примери : 
        
        - Дърво на Фибоначи, пирамида за heap sort
        
        - 2-3-4 дървета - идея
        
        - червено - черно дърво - приложения +
        имплементация на ляво - водещо червено - черно дърво 
            
        - AVL дърво - идея
        
        - "Бе" дървета обща идея, приложения

8. Графи (част 1)
    - представяне в паметта:
    списък от ребрата, матрица на съседство(на тегловност),
    списъци на съседите
    
    - разлики, приложения

    - търсене на път в граф:
        имплементация на "търсене в ширина" (BFS)/"търсене в дълбочина"(DFS) в "лабиринт",     
        имплементация на BFS/DFS обобщено 

9. Графи(част 2)
    - алгоритми за построяване на МПД (минимално покриващо дърво):
        Прим и Крускал + имплементации

10. Графи(част 3)
    -алгоритми за разстояния в граф:
        -- в нетегловен граф: BFS
        -- в тегловен граф:
        
            Дийкстра -> най-къс път от върха s до всички останали 
                    /без отрицателни тежести/
                    
            Флойд - Уаршъл -> най - къс път между всяка двойка върхове     
            
            Белман - Форд -> най-къс път от върха s до всички останали
                            /по-бавен от Дийкстра, но може и отрицателни тегла/   

11. Хеш функции, хеш таблици
    - концепция + сложност на операциите

    - хешираща функция, класически примери :
        остатък по модул размера на масива,
        сума ASCII кодовете + размера на стринга
        
    - справяне с колизии :
        затворено - чрез линейна стъпка,
                    чрез квадратична стъпка,
                    чрез двойно хеширане
                    
        отворено - чрез списък на препълванията

    - примерни реализации

    - известни хеширащи функции използвани в практиката:
    CRC, MD, SHA

12. Сортиране/търсене
    - концепции при сортировките 
	(стабилност, сравнения, размени, адаптивност към полусортирани данни)
        
    - реализация на простите сортировки със сравнения:
        Метод на мехурчето, пряка селекция, сортиране чрез вмъкване

    - алгоритми за търсене:
        последователно търсене, търсене със стъпка, двойчно търсене

13. Сортиране(част 2)
    - сложни сортировки + техните реализации:
	"бързо" сортиране, сортиране чрез сливане, "пирамидално" сортиране

    - сортировки приложими върху свързан списък + реализация
        
    - сортировки без сравнения + техните реализации :
        сортиране чрез броене на честотите, сортиране в "кофи", сортиране по "разряди"
        
    - кои сортировки можем да използваме като "частични"

    * след като сме научили "пирамидалното" сортиране, можем да имплментираме
    двоична приамида и приоритетна опашка.
    * идеята за паралелна реализация на сортировките. 
